export const urlsdotnet = {
  home: "/",
  // Agile
  agile: "/agile",
  "agile scrum": "/agile",
  sprint: "/agile",
  backlog: "/agile",
  "scrum master": "/agile",
  "test driven development": "/agile",
  "agile values": "/agile",
  "agile principles": "/agile",
  // Clean Code
  dry: "/cleancode",
  "clean code": "/cleancode",
  kiss: "/cleancode",
  yagni: "/cleancode",
  "occam's razor": "/cleancode",
  "persistence ignorance": "/cleancode",
  modularity: "/cleancode",
  "bounded context": "/cleancode",
  // Solid
  solid: "/solid",
  // Design Principle vs Design Pattern
  "design pattern versus design principle": "/designpattern",
  "difference between design pattern and design principle": "/designpattern",
  "design pattern": "/designpattern",
  "design principle": "/designpattern",
  // Singleton
  singleton: "/singleton",
  // Factory
  factory: "/factory",
  // Mediator
  mediator: "/mediator",
  // Observer
  observer: "/observer",
  // Command
  command: "/command",
  // Assembly
  assembly: "/assembly",
  // Caching
  caching: "/caching",
  cookie: "/caching",
  cookies: "/caching",
  // DLL vs EXE
  dll: "/dllexe",
  exe: "/dllexe",
  "dll versus exe": "/dllexe",
  "exe versus dll": "/dllexe",
  "dll exe": "/dllexe",
  "dynamic link library": "/dllexe",
  "difference between dll and exe": "/dllexe",
  "difference between exe and dll": "/dllexe",
  // dotnet components
  "dotnet components": "/dotnetcomponents",
  ".net components": "/dotnetcomponents",
  // garbage collector
  gc: "/gc",
  "garbage collector": "/gc",
  unmanaged: "/gc",
  managed: "/gc",
  "unmanaged code": "/gc",
  "managed  code": "/gc",
  "managed versus unmanaged": "/gc",
  "unmanaged versus managed": "/gc",
  "managed unmanaged": "/gc",
  "difference between managed and unmanaged": "/gc",
  "difference between unmanaged and managed": "/gc",
  heap: "/gc",
  "stack heap": "/gc",
  "heap stack": "/gc",
  "stack versus heap": "/gc",
  "heap versus stack": "/gc",
  "stack and heap": "/gc",
  "heap and stack": "/gc",
  "difference between stack and heap": "/gc",
  "difference between heap and stack": "/gc",
  // Garbage collector methods
  "GC method": "/gcmethods",
  "garbage collector method": "/gcmethods",
  // Clean Architecture
  monolithic: "/clean",
  "clean architecture": "/clean",
  clean: "/clean",
  "multilayer architecture": "/clean",
  multilayer: "/clean",
  // CLR
  clr: "/clr",
  "common language runtime": "/clr",
  jit: "/clr",
  "just in time": "/clr",
  "global assembly cache": "/clr",
  gac: "/clr",
  "common type system": "/clr",
  cts: "/clr",
  "code access security": "/clr",
  cas: "/clr",
  "common language specification": "/clr",
  cls: "/clr",
  metadata: "/clr",
  // Controller
  "action selectors": "/controller",
  "action method": "/controller",
  "action result": "/controller",
  "ActionVerbs ": "/controller",
  "NonAction ": "/controller",
  // Controller View data transfer
  "view bag ": "/controllervuedata",
  "view data": "/controllervuedata",
  "temp data": "/controllervuedata",
  "controller view data transfert": "/controllervuedata",
  // CQRS
  cqrs: "/cqrs",
  "command queries responbility segregation": "/cqrs",
  // Dependency injection
  "dependency injection": "/di",
  "inversion of control": "/di",
  "add transcient": "/di",
  "add scoped": "/di",
  "add singleton": "/di",
  // difference  between .net and .net core
  ".net": "/dotnet",
  dotnet: "/dotnet",
  "difference between dotnet standard and dotnet core": "/dotnet",
  "difference between .net standard and .net core": "/dotnet",
  ".net .net core": "/dotnet",
  // Entity Framework
  "entity framework": "/entityframework",
  "entity framework core": "/entityframework",
  // HTTPS
  https: "/https",
  http: "/https",
  "https versus http": "/https",
  "http versus https": "/https",
  ssl: "/https",
  tsl: "/https",
  "hyper text transfer protocol": "/https",
  "secure socket layer": "/https",
  "transfert socket layer": "/https",
  // HTTP Request Methods
  "http request methods": "/httpmethods",
  "http methods": "/httpmethods",
  "get versus post": "/httpmethods",
  "get post": "/httpmethods",
  post: "/httpmethods",
  get: "/httpmethods",
  put: "/httpmethods",
  head: "/httpmethods",
  delete: "/httpmethods",
  patch: "/httpmethods",
  options: "/httpmethods",
  "post method": "/httpmethods",
  "get method": "/httpmethods",
  "put method": "/httpmethods",
  "head method": "/httpmethods",
  "delete method": "/httpmethods",
  "patch method": "/httpmethods",
  "options method": "/httpmethods",
  // Middleware
  middleware: "/middleware",
  // MVC Architecture
  "mvc architecture": "/mvc",
  mvc: "/mvc",
  "model view controller": "/mvc",
  // Nuget packages
  "nuget packages": "/nugetpackages",
  odata: "/nugetpackages",
  "fluent validation": "/nugetpackages",
  "open api": "/nugetpackages",
  // Services
  service: "/service",
  "micro service": "/service",
  api: "/service",
  "web api": "/service",
  wcf: "/service",
  "wcf versus web api": "/service",
  "web api versus wcf": "/service",
  "media type": "/service",
  // Boxing and Unboxing
  boxing: "/boxing",
  unboxing: "/boxing",
  "boxing versus unboxing": "/boxing",
  "unboxing versus boxing": "/boxing",
  "boxing and unboxing": "/boxing",
  "unboxing and boxing": "/boxing",
  "boxing unboxing": "/boxing",
  // Collections
  collections: "/collections",
  dictionary: "/collections",
  stack: "/collections",
  queue: "/collections",
  "array list": "/collections",
  hashtable: "/collections",
  "array versus array list": "/collections",
  "hashtable versus dictionary": "/collections",
  // Covariance et Contravariance
  covariance: "/covariance",
  contravariance: "/covariance",
  // Data Types
  "data types": "/datatype",
  "dynamic type": "/datatype",
  "nullable type": "/datatype",
  "discard type": "/datatype",
  dynamic: "/datatype",
  nullable: "/datatype",
  discard: "/datatype",
  "extension method": "/datatype",
  extension: "/datatype",
  // Delegates
  delegate: "/delegate",
  func: "/delegate",
  action: "/delegate",
  predicate: "/delegate",
  event: "/delegate",
  "func delegate": "/delegate",
  "action delegate": "/delegate",
  "predicate delegate": "/delegate",
  "event delegate": "/delegate",
  // Enumeration and Indexer
  enumeration: "/enumindexer",
  indexer: "/enumindexer",
  generic: "/enumindexer",
  // Linq
  linq: "/linq",
  "language integrated query": "/linq",
  query: "/linq",
  deferred: "/linq",
  immediate: "/linq",
  "deferred immediate": "/linq",
  "deferred versus immediate": "/linq",
  "immediate versus deferred": "/linq",
  "deferred and immediate": "/linq",
  "immediate and deferred": "/linq",
  // Modifiers
  "access modifiers": "/modifiers",
  "non access modifiers": "/modifiers",
  modifiers: "/modifiers",
  public: "/modifiers",
  private: "/modifiers",
  protected: "/modifiers",
  internal: "/modifiers",
  "protected internal": "/modifiers",
  "private protected": "/modifiers",
  sealed: "/modifiers",
  abstract: "/modifiers",
  static: "/modifiers",
  virtual: "/modifiers",
  override: "/modifiers",
  readonly: "/modifiers",
  const: "/modifiers",
  volatile: "/modifiers",
  unsafe: "/modifiers",
  "abstract interface": "/modifiers",
  "interface abstract": "/modifiers",
  "abstract versus interface": "/modifiers",
  "interface versus abstract": "/modifiers",
  "abstract and interface": "/modifiers",
  "interface and abstract": "/modifiers",
  this: "/modifiers",
  is: "/modifiers",
  as: "/modifiers",
  // New features in C# 9
  "csharp new features": "/csharp-features",
  csharp: "/csharp-features",
  "c#": "/csharp-features",
  "top level statements": "/csharp-features",
  "init only setters": "/csharp-features",
  "pattern matching": "/csharp-features",
  "target typed new": "/csharp-features",
  // OOP
  "object oriented programming": "/oop",
  oop: "/oop",
  inheritance: "/oop",
  abstraction: "/oop",
  polymorphism: "/oop",
  encapsulation: "/oop",
  properties: "/oop",
  overloading: "/oop",
  overload: "/oop",
  // Ref, in and Out
  ref: "/refoutin",
  out: "/refoutin",
  "ref versus out": "/refoutin",
  in: "/refoutin",
  // keyword instructions
  "partial type": "/statements",
  partial: "/statements",
  lock: "/statements",
  yield: "/statements",
  // string2int
  "string to int": "/string2int",
  convert: "/string2int",
  parse: "/string2int",
  "try parse": "/string2int",
  // String Builder
  "string builder": "/stringbuilder",
  // Thread Task
  task: "/threads",
  thread: "/threads",
  // Tuple
  tuple: "/tuple",
  "value tuple": "/tuple",
  // Type System
  "type sytem": "/typesystem",
  struct: "/typesystem",
  record: "/typesystem",
  "struct and class": "/typesystem",
  "struct versus class": "/typesystem",
  "difference between class and struct": "/typesystem",
  "class object": "/typesystem",
  "object class": "/typesystem",
  class: "/typesystem",
  object: "/typesystem",
  "class versus object": "/typesystem",
  "object versus class": "/typesystem",
  "class and object": "/typesystem",
  "object and class": "/typesystem",
  "difference between object and class": "/typesystem",
  "difference between class and object": "/typesystem",
  serialization: "/typesystem",
};
