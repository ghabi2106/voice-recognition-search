export const urlsdotnet = {
  home: "/",
  // Adapter
  adapter: "/adapter",
  "adapter principle": "/adapter",
  // Clean Code
  dry: "/cleancode",
  "clean code": "/cleancode",
  kiss: "/cleancode",
  yagni: "/cleancode",
  "occam's razor": "/cleancode",
  "persistence ignorance": "/cleancode",
  modularity: "/cleancode",
  "bounded context": "/cleancode",
  // Solid
  solid: "/solid",
  // Design Principle vs Design Pattern
  "design pattern versus design principle": "/designpattern",
  "difference between design pattern and design principle": "/designpattern",
  "design pattern": "/designpattern",
  "design principle": "/designpattern",
  // Singleton
  singleton: "/singleton",
  // Factory
  factory: "/factory",
  // Mediator
  mediator: "/mediator",
  // Observer
  observer: "/observer",
  // Command
  command: "/command",
  // Assembly
  assembly: "/assembly",
  // Caching
  caching: "/caching",
  // DLL vs EXE
  dll: "/dllexe",
  exe: "/dllexe",
  "dll versus exe": "/dllexe",
  "exe versus dll": "/dllexe",
  "dll exe": "/dllexe",
  "dynamic link library": "/dllexe",
  "difference between dll and exe": "/dllexe",
  "difference between exe and dll": "/dllexe",
  // dotnet components
  "dotnet components": "/dotnetcomponents",
  ".net components": "/dotnetcomponents",
  // garbage collector
  gc: "/gc",
  "garbage collector": "/gc",
  unmanaged: "/gc",
  managed: "/gc",
  "unmanaged code": "/gc",
  "managed  code": "/gc",
  "managed versus unmanaged": "/gc",
  "unmanaged versus managed": "/gc",
  "managed unmanaged": "/gc",
  "difference between managed and unmanaged": "/gc",
  "difference between unmanaged and managed": "/gc",
  heap: "/gc",
  "stack heap": "/gc",
  "heap stack": "/gc",
  "stack versus heap": "/gc",
  "heap versus stack": "/gc",
  "stack and heap": "/gc",
  "heap and stack": "/gc",
  "difference between stack and heap": "/gc",
  "difference between heap and stack": "/gc",
  // Garbage collector methods
  "GC method": "/gcmethods",
  "garbage collector method": "/gcmethods",
  // Clean Architecture
  monolithic: "/clean",
  "clean architecture": "/clean",
  clean: "/clean",
  "multilayer architecture": "/clean",
  multilayer: "/clean",
  // CLR
  clr: "/clr",
  "common language runtime": "/clr",
  jit: "/clr",
  "just in time": "/clr",
  "global assembly cache": "/clr",
  gac: "/clr",
  "common type system": "/clr",
  cts: "/clr",
  "code access security": "/clr",
  cas: "/clr",
  "common language specification": "/clr",
  cls: "/clr",
  metadata: "/clr",
  // Composition
  composition: "/composition",
  // Controller
  "action selectors": "/controller",
  "action method": "/controller",
  "action result": "/controller",
  "ActionVerbs ": "/controller",
  "NonAction ": "/controller",
  // Controller View data transfer
  "view bag ": "/controllervuedata",
  "view data": "/controllervuedata",
  "temp data": "/controllervuedata",
  "controller view data transfert": "/controllervuedata",
  // CQRS
  cqrs: "/cqrs",
  "command queries responbility segregation": "/cqrs",
  // Event Sourcing
  sourcing: "/event-sourcing",
  "event sourcing": "/event-sourcing",
  // DDD
  "domain driven design": "/ddd",
  // Dependency injection
  "dependency injection": "/di",
  "inversion of control": "/di",
  "add transcient": "/di",
  "add scoped": "/di",
  "add singleton": "/di",
  // difference  between .net and .net core
  ".net": "/dotnet",
  dotnet: "/dotnet",
  "difference between dotnet standard and dotnet core": "/dotnet",
  "difference between .net standard and .net core": "/dotnet",
  ".net .net core": "/dotnet",
  // Entity Framework
  "entity framework": "/entityframework",
  "entity framework core": "/entityframework",
  // HTTPS
  https: "/https",
  http: "/https",
  "https versus http": "/https",
  "http versus https": "/https",
  ssl: "/https",
  tsl: "/https",
  "hyper text transfer protocol": "/https",
  "secure socket layer": "/https",
  "transfert socket layer": "/https",
  // WebSocket
  socket: "/websocket",
  "web socket": "/websocket",
  // HTTP Request Methods
  "http request methods": "/httpmethods",
  "http methods": "/httpmethods",
  "get versus post": "/httpmethods",
  "get post": "/httpmethods",
  post: "/httpmethods",
  get: "/httpmethods",
  put: "/httpmethods",
  head: "/httpmethods",
  delete: "/httpmethods",
  patch: "/httpmethods",
  options: "/httpmethods",
  "post method": "/httpmethods",
  "get method": "/httpmethods",
  "put method": "/httpmethods",
  "head method": "/httpmethods",
  "delete method": "/httpmethods",
  "patch method": "/httpmethods",
  "options method": "/httpmethods",
  // Hosted service
  "hoster service": "/hostedservice",
  "background service": "/hostedservice",
  // Filters
  filters: "/filters",
  "action filter": "/filters",
  // jwt
  jwt: "/jwt",
  "json web token": "/jwt",
  "cross-site scripting": "/jwt",
  xss: "/jwt",
  csrf: "/jwt",
  "cross-site request forgery": "/jwt",
  // Middleware
  middleware: "/middleware",
  // MVC Architecture
  "mvc architecture": "/mvc",
  mvc: "/mvc",
  "model view controller": "/mvc",
  // Nuget packages
  "nuget packages": "/nugetpackages",
  odata: "/nugetpackages",
  "fluent validation": "/nugetpackages",
  "open api": "/nugetpackages",
  // Services
  service: "/service",
  "micro service": "/service",
  api: "/service",
  "web api": "/service",
  wcf: "/service",
  "wcf versus web api": "/service",
  "web api versus wcf": "/service",
  "media type": "/service",
  // Boxing and Unboxing
  boxing: "/boxing",
  unboxing: "/boxing",
  "boxing versus unboxing": "/boxing",
  "unboxing versus boxing": "/boxing",
  "boxing and unboxing": "/boxing",
  "unboxing and boxing": "/boxing",
  "boxing unboxing": "/boxing",
  // Collections
  collections: "/collections",
  dictionary: "/collections",
  stack: "/collections",
  queue: "/collections",
  "array list": "/collections",
  hashtable: "/collections",
  "array versus array list": "/collections",
  "hashtable versus dictionary": "/collections",
  // Covariance et Contravariance
  covariance: "/covariance",
  contravariance: "/covariance",
  // Data Types
  "data type": "/datatype",
  "dynamic type": "/datatype",
  "nullable type": "/datatype",
  "discard type": "/datatype",
  dynamic: "/datatype",
  nullable: "/datatype",
  discard: "/datatype",
  "extension method": "/datatype",
  extension: "/datatype",
  "type safety": "/datatype",
  "safety type": "/datatype",
  // Delegates
  delegate: "/delegate",
  func: "/delegate",
  action: "/delegate",
  predicate: "/delegate",
  event: "/delegate",
  "func delegate": "/delegate",
  "action delegate": "/delegate",
  "predicate delegate": "/delegate",
  "event delegate": "/delegate",
  // Enumeration and Indexer
  enumeration: "/enumindexer",
  indexer: "/enumindexer",
  generic: "/enumindexer",
  // IDEALS
  ideals: "/ideals",
  // Linq
  linq: "/linq",
  "language integrated query": "/linq",
  query: "/linq",
  deferred: "/linq",
  immediate: "/linq",
  "deferred immediate": "/linq",
  "deferred versus immediate": "/linq",
  "immediate versus deferred": "/linq",
  "deferred and immediate": "/linq",
  "immediate and deferred": "/linq",
  // Memberwiseclone
  "memberwise clone": "/memberwiseclone",
  "shallow copy": "/memberwiseclone",
  "deep copy": "/memberwiseclone",
  shallow: "/memberwiseclone",
  deep: "/memberwiseclone",
  // Modifiers
  "access modifiers": "/modifiers",
  "non access modifiers": "/modifiers",
  modifiers: "/modifiers",
  public: "/modifiers",
  private: "/modifiers",
  protected: "/modifiers",
  internal: "/modifiers",
  "protected internal": "/modifiers",
  "private protected": "/modifiers",
  sealed: "/modifiers",
  abstract: "/modifiers",
  static: "/modifiers",
  virtual: "/modifiers",
  override: "/modifiers",
  readonly: "/modifiers",
  const: "/modifiers",
  volatile: "/modifiers",
  unsafe: "/modifiers",
  extern: "/modifiers",
  "abstract interface": "/modifiers",
  "interface abstract": "/modifiers",
  "abstract versus interface": "/modifiers",
  "interface versus abstract": "/modifiers",
  "abstract and interface": "/modifiers",
  "interface and abstract": "/modifiers",
  new: "/modifiers",
  "hiding method": "/modifiers",
  // New features in C# 9
  "csharp new features": "/csharp9",
  csharp: "/csharp9",
  "c#": "/csharp9",
  "csharp 9": "/csharp9",
  "c# 9": "/csharp9",
  "top level statements": "/csharp9",
  "init only setters": "/csharp9",
  "pattern matching": "/csharp9",
  "target typed new": "/csharp9",
  // New features in C# 10
  "csharp 10": "/csharp10",
  "c# 10": "/csharp10",
  // New features in C# 11
  "csharp 11": "/csharp11",
  "c# 11": "/csharp11",
  // New features in C# 12
  "csharp 12": "/csharp12",
  "c# 12": "/csharp12",
  // Plan project
  "plan project": "/plan",
  plan: "/plan",
  // OOP
  "object oriented programming": "/oop",
  oop: "/oop",
  inheritance: "/oop",
  abstraction: "/oop",
  polymorphism: "/oop",
  encapsulation: "/oop",
  properties: "/oop",
  overloading: "/oop",
  overload: "/oop",
  diamond: "/oop",
  "diamond problem": "/oop",
  // OOP2
  association: "/oop2",
  aggregation: "/oop2",
  "composition versus aggregation": "/oop2",
  "aggregation versus composition": "/oop2",
  "composition and aggregation": "/oop2",
  "aggregation and composition": "/oop2",
  "composition aggregation": "/oop2",
  "aggregation composition": "/oop2",
  "difference between composition and aggregation": "/oop2",
  "difference between aggregation and composition": "/oop2",
  // OOP3
  delegation: "/oop3",
  coupling: "/oop3",
  cohesion: "/oop3",
  // keyword contextual
  partial: "/contextual",
  yield: "/contextual",
  when: "/contextual",
  where: "/contextual",
  // keyword operators
  "type of get type": "/operators",
  "get type type of": "/operators",
  "type of": "/operators",
  "get type": "/operators",
  "type casting": "/operators",
  "casting type": "/operators",
  implicit: "/operators",
  explicit: "/operators",
  "implicit casting": "/operators",
  "explicit casting": "/operators",
  is: "/operators",
  as: "/operators",
  "with switch": "/operators",
  "stack alloc": "/operators",
  "name of": "/operators",
  "size of": "/operators",
  // keyword parameters
  ref: "/parameters",
  reference: "/parameters",
  out: "/parameters",
  "ref verus out": "/parameters",
  "reference versus out": "/parameters",
  "out verus ref": "/parameters",
  "out versus reference": "/parameters",
  in: "/parameters",
  // keyword statements
  lock: "/statements",
  fixed: "/statements",
  check: "/statements",
  unchecked: "/statements",
  jump: "/statements",
  "jump statement": "/statements",
  break: "/statements",
  continue: "/statements",
  return: "/statements",
  "go to": "/statements",
  // keyword thisbase
  this: "/thisbase",
  base: "/thisbase",
  // advanced
  marshaling: "/advanced",
  "platform invoke": "/advanced",
  simd: "/advanced",
  // Array
  array: "/array",
  "jagged array": "/array",
  "multidimensional array": "/array",
  jagged: "/array",
  multidimensional: "/array",
  // binding
  binding: "/binding",
  "early bound": "/binding",
  "late bound": "/binding",
  "early bound late bound": "/binding",
  "late bound early bound": "/binding",
  "early bound versus late bound": "/binding",
  "late bound versus early bound": "/binding",
  "early bound and late bound": "/binding",
  "late bound and early bound": "/binding",
  "difference between early bound and late bound": "/binding",
  "difference between late bound and early bound": "/binding",
  // preprocessordirectives
  "preprocessor directive": "/preprocessordirectives",
  // string2int
  "string to int": "/string2int",
  convert: "/string2int",
  parse: "/string2int",
  "try parse": "/string2int",
  // String Builder
  "string builder": "/stringbuilder",
  // Thread Task
  task: "/threads",
  thread: "/threads",
  // Tuple
  tuple: "/tuple",
  "value tuple": "/tuple",
  // Type System
  "type sytem": "/typesystem",
  struct: "/typesystem",
  record: "/typesystem",
  "struct and class": "/typesystem",
  "struct versus class": "/typesystem",
  "difference between class and struct": "/typesystem",
  "class object": "/typesystem",
  "object class": "/typesystem",
  class: "/typesystem",
  object: "/typesystem",
  "class versus object": "/typesystem",
  "object versus class": "/typesystem",
  "class and object": "/typesystem",
  "object and class": "/typesystem",
  "difference between object and class": "/typesystem",
  "difference between class and object": "/typesystem",
  serialization: "/typesystem",
  // Docker and VM Deployment
  "docker deployment": "/docker-deploy",
  // NGINX and VM Deployment
  "nginx deployment": "/nginx-deploy",
  "linux deployment": "/nginx-deploy",
  // IIS and VM Deployment
  "iis deployment": "/iis-deploy",
  "windows deployment": "/iis-deploy",
  // web hosting
  "web hosting": "/web-hosting",
  hosting: "/web-hosting",
  // ci-cd
  cicd: "/cicd",
  "ci cd": "/cicd",
  "continued integration continued development": "/cicd",
  // Docker
  docker: "/docker",
  container: "/docker",
  "container image": "/docker",
  dockerfile: "/docker",
  volumes: "/docker",
  "docker hub": "/docker",
  compose: "/docker",
  registry: "/docker",
  orchestrator: "/docker",
  // Userdefinedtype
  "user-defined conversion": "/userdefinedtype",
  "user-defined type": "/userdefinedtype",
  // Ocelot
  ocelot: "/ocelot",
  "api gateway": "/ocelot",
  gateway: "/ocelot",
  // Grpc
  grpc: "/grpc",
  // Message Broker
  "message broker": "/message-broker",
  rabbitmq: "/message-broker",
  masstransit: "/message-broker",
  redis: "/message-broker",
  // Identity Server
  "identity Server": "/identity-server",
  // Saga
  saga: "/saga",
  // cap
  cap: "/cap",
  // create project
  "create project": "/create-project",
  // polly
  polly: "/polly",
  // resilience
  resilience: "/resilience",
  // security
  security: "/security",
  // service discovery
  "service discovery": "/service discovery",
  // tracing
  tracing: "/tracing",
  // tracing
  "unit testing": "/unit-testing",
  // versionning
  versionning: "/versionning",
  // tenant
  tenant: "/tenant",
  "multi tenant": "/tenant",
  // resolve conflict
  "resolve conflict": "/resolve-conflict",
  // Connection Pooling
  "connection pooling": "/connection-pooling",
  "pooling": "/connection-pooling",
  // DbContext
  dbcontext: "/dbcontext",
  "db context": "/dbcontext",
  "ef dbcontext": "/dbcontext",
  "entity framework dbcontext": "/dbcontext",
  // Model Binding
  "model binding": "/model-binding",
  // Repository
  "repository": "/repository",
  // UnitOfWork
  "unit of work": "/unitofwork",
};
