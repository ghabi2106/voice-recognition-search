export const pagesdotnet = [
  "home",
  // Adapter
  "adapter",
  "adapter principle",
  // Clean Code
  "dry",
  "clean code",
  "kiss",
  "yagni",
  "occam's razor",
  "persistence ignorance",
  "modularity",
  "bounded context",
  // Solid
  "solid",
  // Design Principle vs Design Pattern
  "design pattern versus design principle",
  "difference between design pattern and design principle",
  "design pattern",
  "design principle",
  // Singleton
  "singleton",
  // Factory
  "factory",
  // Mediator
  "mediator",
  // Observer
  "observer",
  // Command
  "command",
  // Assembly
  "assembly",
  // Caching
  "caching",
  // DLL vs EXE
  "dll",
  "exe",
  "dll versus exe",
  "exe versus dll",
  "dll exe",
  "dynamic link library",
  "difference between dll and exe",
  "difference between exe and dll",
  // dotnet components
  "dotnet components",
  ".net components",
  // Garbage collector
  "gc",
  "garbage collector",
  "unmanaged" ,
  "managed" ,
  "unmanaged code",
  "managed  code" ,
  "managed versus unmanaged",
  "unmanaged versus managed",
  "managed unmanaged",
  "difference between managed and unmanaged",
  "difference between unmanaged and managed",
  "stack",
  "heap",
  "stack heap",
  "heap stack",
  "stack versus heap",
  "heap versus stack",
  "stack and heap",
  "heap and stack",
  "difference between stack and heap",
  "difference between heap and stack",
  // Garbage collector methods
  "GC method",
  "garbage collector method",
  // Clean Architecture
  "monolithic",
  "clean architecture",
  "clean",
  "multilayer architecture",
  "multilayer",
  // CLR
  "clr",
  "common language runtime",
  "jit",
  "just in time",
  "global assembly cache",
  "gac",
  "common type system",
  "cts",
  "code access security",
  "cas",
  "common language specification",
  "cls",
  "metadata",
  // Composition
  "composition",
  // Controller
  "action selectors",
  "action method",
  "action result",
  "ActionVerbs ",
  "NonAction ",
  // Controller View data transfer
  "view bag ",
  "view data",
  "temp data",
  "controller view data transfert",
  // CQRS
  "cqrs",
  "command queries responbility segregation",
  // DDD
  "domain driven design",
  // Dependency injection
  "dependency injection",
  "inversion of control",
  "add transcient",
  "add scoped",
  "add singleton",
  // difference  between .net and .net core
  ".net",
  "dotnet",
  "difference between dotnet standard and dotnet core",
  "difference between .net standard and .net core",
  ".net .net core",
  // Entity Framework
  "entity framework",
  "entity framework core",
  // HTTPS
  "https",
  "http",
  "https versus http",
  "http versus https",
  "ssl",
  "tsl",
  "hyper text transfer protocol",
  "secure socket layer",
  "transfert socket layer",
  // HTTP Request Methods
  "http request methods",
  "http methods",
  "get versus post",
  "get post",
  "post",
  "get",
  "put",
  "head",
  "delete",
  "patch",
  "options",
  "post method",
  "get method",
  "put method",
  "head method",
  "delete method",
  "patch method",
  "options method",
  // Hosted service
  "hoster service",
  "background service",
  // jwt
  "jwt",
  "json web token",
  "cross-site scripting",
  "xss",
  "csrf",
  "cross-site request forgery",
  // Middleware
  "middleware",
  // MVC Architecture
  "mvc architecture",
  "mvc",
  "model view controller",
  // Nuget packages
  "nuget packages",
  "odata",
  "fluent validation",
  "open api",
  // Services
  "service",
  "micro service",
  // Boxing and Unboxing
  "boxing",
  "unboxing",
  "boxing versus unboxing",
  "unboxing versus boxing",
  "boxing and unboxing",
  "unboxing and boxing",
  "boxing unboxing",
  // Collections
  "collections",
  "dictionary",
  "stack",
  "queue",
  "array list",
  "hashtable",
  "array versus array list",
  "hashtable versus dictionary",
  // Covariance et Contravariance
  "covariance",
  "contravariance",
  // Data Types
  "data type",
  "dynamic type",
  "nullable type",
  "discard type",
  "dynamic",
  "nullable",
  "discard",
  "extension method",
  "extension",
  "type safety",
  "safety type",
  // Delegates
  "delegate",
  "func",
  "action",
  "predicate",
  "event",
  "func delegate",
  "action delegate",
  "predicate delegate",
  "event delegate",
  // Enumeration and Indexer
  "enumeration",
  "indexer",
  "generic",
  // IDEALS
  "ideals",
  // Linq
  "linq",
  "language integrated query",
  "query",
  "deferred",
  "immediate",
  "deferred immediate",
  "deferred versus immediate",
  "immediate versus deferred",
  "deferred and immediate",
  "immediate and deferred",
  // Memberwiseclone
  "memberwise clone",
  "shallow copy",
  "deep copy",
  "shallow",
  "deep",
  // Modifiers
  "access modifiers",
  "non access modifiers",
  "modifiers",
  "public",
  "private",
  "protected",
  "internal",
  "protected",
  "internal",
  "protected internal",
  "private protected",
  "sealed",
  "abstract",
  "static",
  "virtual",
  "override",
  "readonly",
  "const",
  "volatile",
  "unsafe",
  "extern",
  "abstract interface",
  "interface abstract",
  "abstract versus interface",
  "interface versus abstract",
  "abstract and interface",
  "interface and abstract",
  "new",
  "hiding method",
  // New features in C# 9
  "csharp new features",
  "csharp",
  "csharp 9",
  "c# 9",
  "c#",
  "top level statements",
  "init only setters",
  "record",
  "pattern matching",
  "target typed new",
  // New features in C# 9
  "csharp 10",
  "c# 10",
  // OOP
  "object oriented programming",
  "inheritance",
  "abstraction",
  "polymorphism",
  "encapsulation",
  "properties",
  "overloading",
  "overload",
  "diamond",
  "diamond problem",
  // OOP2
  "association",
  "aggregation",
  "composition versus aggregation",
  "aggregation versus composition",
  "composition and aggregation",
  "aggregation and composition",
  "composition aggregation",
  "aggregation composition",
  "difference between composition and aggregation",
  "difference between aggregation and composition",
  // OOP3
  "delegation",
  "coupling",
  "cohesion",
  // keyword contextual
  "partial",
  "yield",
  "when",
  "where",
  // keyword operators
  "type of get type",
  "get type type of",
  "type of",
  "get type",
  "type casting",
  "casting type",
  "implicit",
  "explicit",
  "implicit casting",
  "explicit casting",
  "is",
  "as",
  "with switch",
  "stack alloc",
  "name of",
  "size of",
  // keyword parameters
  "ref",
  "reference",
  "out",
  "ref verus out",
  "reference versus out",
  "out verus ref",
  "out versus reference",
  "in",
  // keyword statements
  "lock",
  "fixed",
  "check",
  "unchecked",
  "jump",
  "jump statement",
  "break",
  "continue",
  "return",
  "go to",
  // keyword thisbase
  "this",
  "base",
  // advanced
  "marshaling",
  "platform invoke",
  "simd",
  // Array
  "array",
  "jagged array",
  "multidimensional array",
  "jagged",
  "multidimensional",
  // binding
  "binding",
  "early bound",
  "late bound",
  "early bound late bound",
  "late bound early bound",
  "early bound versus late bound",
  "late bound versus early bound",
  "early bound and late bound",
  "late bound and early bound",
  "difference between early bound and late bound",
  "difference between late bound and early bound",
  // preprocessordirectives
  "preprocessor directive",
  // string2int
  "string to int",
  "convert",
  "parse",
  "try parse",
  // String Builder
  "string builder",
  // Thread Task
  "task",
  "thread",
  // Tuple
  "tuple",
  "value tuple",
  // Type System
  "type sytem",
  "struct",
  "record",
  "struct and class",
  "struct versus class",
  "difference between class and struct",
  "class object",
  "object class",
  "class",
  "object",
  "class versus object",
  "object versus class",
  "class and object",
  "object and class",
  "difference between object and class",
  "difference between class and object",
  "serialization",
  // Docker
  "docker",
  "container",
  "container image",
  "dockerfile",
  "volumes",
  "docker hub",
  "compose",
  "registry",
  "orchestrator",
  // HTTPS.sys
  "http.sys",
  // IIS
  "iis",
  "Internet Information Services",
  "in process hosting",
  "out process hosting",
  // Kestrel
  "kestrel",
  "reverse proxy",
  "forwarded headers",
  // Server
  "server",
  "web server",
  // Userdefinedtype
  "user-defined conversion",
  "user-defined type",
];