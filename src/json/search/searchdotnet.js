export const pagesdotnet = [
  "home",
  // Agile
  "agile",
  "agile scrum",
  "sprint",
  "backlog",
  "scrum master",
  "test driven development",
  "agile values",
  "agile principles",
  // Assembly
  "assembly",
  // Caching
  "caching",
  "cookie",
  "cookies",
  // Clean Code
  "dry",
  "clean code",
  "kiss",
  "yagni",
  "occam's razor",
  "persistence ignorance",
  "modularity",
  "bounded context",
  // DLL vs EXE
  "dll",
  "exe",
  "dll versus exe",
  "exe versus dll",
  "dll exe",
  "dynamic link library",
  "difference between dll and exe",
  "difference between exe and dll",
  // dotnet components
  "dotnet components",
  ".net components",
  // Function vs Stored procedure
  "function",
  "stored procedure",
  "function versus stored procedure",
  "stored procedure versus function",
  "function stored procedure",
  "difference between function and stored procedure",
  "difference between stored procedure and function",
  // Garbage collector
  "gc",
  "garbage collector",
  "unmanaged" ,
  "managed" ,
  "unmanaged code",
  "managed  code" ,
  "managed versus unmanaged",
  "unmanaged versus managed",
  "managed unmanaged",
  "difference between managed and unmanaged",
  "difference between unmanaged and managed",
  "stack",
  "heap",
  "stack heap",
  "heap stack",
  "stack versus heap",
  "heap versus stack",
  "stack and heap",
  "heap and stack",
  "difference between stack and heap",
  "difference between heap and stack",
  // Clean Architecture
  "monolithic",
  "clean architecture",
  "clean",
  "multilayer architecture",
  "multilayer",
  // CLR
  "clr",
  "common language runtime",
  "jit",
  "just in time",
  "global assembly cache",
  "gac",
  "common type system",
  "cts",
  "code access security",
  "cas",
  "common language specification",
  "cls",
  "metadata",
  // Controller
  "action selectors",
  "action method",
  "action result",
  "ActionVerbs ",
  "NonAction ",
  // Controller View data transfer
  "view bag ",
  "view data",
  "temp data",
  "controller view data transfert",
  // CQRS
  "cqrs",
  "command queries responbility segregation",
  // Design Principle vs Design Pattern
  "design pattern versus design principle",
  "difference between design pattern and design principle",
  "design pattern",
  "design principle",
  // Dependency injection
  "dependency injection",
  "inversion of control",
  "add transcient",
  "add scoped",
  "add singleton",
  // difference  between .net and .net core
  ".net",
  "dotnet",
  "difference between dotnet standard and dotnet core",
  "difference between .net standard and .net core",
  ".net .net core",
  // Entity Framework
  "entity framework",
  "entity framework core",
  // HTTPS
  "https",
  "http",
  "https versus http",
  "http versus https",
  "ssl",
  "tsl",
  "hyper text transfer protocol",
  "secure socket layer",
  "transfert socket layer",
  // HTTP Request Methods
  "http request methods",
  "http methods",
  "get versus post",
  "get post",
  "post",
  "get",
  "put",
  "head",
  "delete",
  "patch",
  "options",
  "post method",
  "get method",
  "put method",
  "head method",
  "delete method",
  "patch method",
  "options method",
  // Middleware
  "middleware",
  // MVC Architecture
  "mvc architecture",
  "mvc",
  "model view controller",
  // Nuget packages
  "nuget packages",
  "odata",
  "fluent validation",
  "open api",
  // Services
  "service",
  "micro service",
  // Singleton Mediator Observer Command
  "singleton",
  "mediator",
  "observer",
  "command",
  // Solid
  "solid",
  // Boxing and Unboxing
  "boxing",
  "unboxing",
  "boxing versus unboxing",
  "unboxing versus boxing",
  "boxing and unboxing",
  "unboxing and boxing",
  "boxing unboxing",
  // Collections
  "collections",
  "dictionary",
  "stack",
  "queue",
  "array list",
  "hashtable",
  "array versus array list",
  "hashtable versus dictionary",
  // Covariance et Contravariance
  "covariance",
  "contravariance",
  // Data Types
  "data types",
  "dynamic type",
  "nullable type",
  "discard type",
  "dynamic",
  "nullable",
  "discard",
  "extension method",
  "extension",
  // Delegates
  "delegate",
  "func",
  "action",
  "predicate",
  "event",
  "func delegate",
  "action delegate",
  "predicate delegate",
  "event delegate",
  // Enumeration and Indexer
  "enumeration",
  "indexer",
  "generic",
  // Linq
  "linq",
  "language integrated query",
  "query",
  "deferred",
  "immediate",
  "deferred immediate",
  "deferred versus immediate",
  "immediate versus deferred",
  "deferred and immediate",
  "immediate and deferred",
  // Modifiers
  "access modifiers",
  "non access modifiers",
  "modifiers",
  "public",
  "private",
  "protected",
  "internal",
  "protected",
  "internal",
  "protected internal",
  "private protected",
  "sealed",
  "abstract",
  "static",
  "virtual",
  "override",
  "readonly",
  "const",
  "volatile",
  "unsafe",
  "abstract interface",
  "interface abstract",
  "abstract versus interface",
  "interface versus abstract",
  "abstract and interface",
  "interface and abstract",
  // New features in C# 9
  "csharp new features",
  "top level statements",
  "init only setters",
  "record",
  "pattern matching",
  "target typed new",
  // OOP
  "object oriented programming",
  "inheritance",
  "abstraction",
  "polymorphism",
  "encapsulation",
  "properties",
  // Ref, in and Out
  "out",
  "ref versus out",
  "in",
  // keyword instructions
  "partial type",
  "partial",
  "lock",
  "yield",
  // string2int
  "string to int",
  "convert",
  "parse",
  "try parse",
  // String Builder
  "string builder",
  // Thread Task
  "task",
  "thread",
  // Tuple
  "tuple",
  "value tuple",
  // Type System
  "type sytem",
  "struct",
  "record",
  "struct and class",
  "struct versus class",
  "difference between class and struct",
  "class object",
  "object class",
  "class",
  "object",
  "class versus object",
  "object versus class",
  "class and object",
  "object and class",
  "difference between object and class",
  "difference between class and object",
];